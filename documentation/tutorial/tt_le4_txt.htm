<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 6.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Agent iSolutions - Tutorial - Lesson IV - Text</title>
<link rel="stylesheet" type="text/css" href="../../style/ais_style.css">
<script type="text/javascript" src="../doctree.jsc"></script>
<script type="text/javascript" src="../../scripts/treescript.jsc"></script>
</head>

<body onload="open_folder_to_page('OUT10t,OUT13t,OUT18t,DT64');">
<table border="0" width="100%" cellspacing="0" cellpadding="0" height="29">
  <tr>
    <td width="168" valign="bottom" rowspan="2" height="29"><img border="0" src="../../images/aislogo_600_small.jpg" WIDTH="168" HEIGHT="78"></td>
    <td width="439" height="46" align="left" valign="bottom" colspan="12"></td>
  </tr>
  <tr>
    <td width="11" height="1" align="left" valign="bottom"><img border="0" src="../../images/nb_sep.gif" WIDTH="11" HEIGHT="34"></td>
    <td width="73" height="1" align="left" valign="bottom" background="../../images/nb_background.jpg"><p class="nb_text"><a style="text-decoration:none;" href="../../index.htm">Home</a></td>
    <td width="12" height="1" align="left" valign="bottom"><img border="0" src="../../images/nb_sep.gif" WIDTH="11" HEIGHT="34"></td>
    <td width="104" height="1" align="left" valign="bottom" background="../../images/nb_background.jpg"><p class="nb_text"><a style="text-decoration:none;" href="../../products/index.htm">Products</a></td>
    <td width="23" height="1" align="left" valign="bottom"><img border="0" src="../../images/nb_sep.gif" WIDTH="11" HEIGHT="34"></td>
    <td width="49" height="1" align="left" valign="bottom" background="../../images/nb_background.jpg"><p class="nb_text"><a href="../index.htm">Documentation</a></td>
    <td width="16" height="1" align="left" valign="bottom"><img border="0" src="../../images/nb_sep.gif" WIDTH="11" HEIGHT="34"></td>
    <td width="45" height="1" align="left" valign="bottom" background="../../images/nb_background.jpg"><p class="nb_text"><a style="text-decoration:none;" href="../../download/index.htm">Download</a></td>
    <td width="45" height="1" align="left" valign="bottom"><img border="0" src="../../images/nb_sep.gif" WIDTH="11" HEIGHT="34"></td>
    <td width="45" height="1" align="left" valign="bottom" background="../../images/nb_background.jpg"><p class="nb_text"><a style="text-decoration:none;" href="../../support/index.htm">Support</a></td>
    <td width="16" height="1" align="left" valign="bottom"><img border="0" src="../../images/nb_sep.gif" WIDTH="11" HEIGHT="34"></td>
    <td width="100%" height="1" align="left" valign="bottom" background="../../images/nb_background.jpg"></td>
  </tr>
</table>
<div align="left">

<table border="0" cellpadding="0" cellspacing="0" width="100%">
  <tr>
    <td height="10" width="100%"></td>
  </tr>
</table>
</div><div align="left">

<table border="0" cellpadding="0" cellspacing="0" width="100%" height="200">
  <tr>
    <td width="164" valign="top" bgcolor="#6C69F7" height="1%"><p class="TOCHeader">Documentation</td>
    <td width="12" rowspan="9" valign="top" height="200"><img border="0" src="../../images/vline.gif" width="6" height="492" hspace="3"> </td>
    <td width="100%" valign="top" align="justify" height="1" colspan="5"><p class="aisheader1">Tutorial
    - Lesson IV - Text</td>
  </tr>
  <tr>
    <td width="167" rowspan="8" valign="top" height="200"><script language="javascript">
      	 <!--
      	 	createDocumentTree("../");
      	 -->
      	 </script>
    </td>
    <td width="100%" valign="top" align="left" height="1" colspan="5"><hr COLOR="#C0C0C0" NOSHADE align="left" size="1">
    </td>
  </tr>
  <tr>
    <td width="12%" valign="top" align="left" height="1"><p class="ls_nav_text_l"><a href="tt_le3_txt.htm">Prev</a> </td>
    <td width="25%" valign="top" align="left" height="1"><p class="ls_nav_text_c"><font color="#808080">Text</font> </td>
    <td width="25%" valign="top" align="left" height="1"><p class="ls_nav_text_c"><a href="tt_le4_cod.htm">Code</a> </td>
    <td width="25%" valign="top" align="left" height="1"><p class="ls_nav_text_c"><a href="tt_le4_syn.htm">Syntax</a> </td>
    <td width="12%" valign="top" align="left" height="1"><p class="ls_nav_text_r" align="left"><a href="tt_le5_txt.htm">Next</a> </td>
  </tr>
  <tr>
    <td width="100%" valign="top" align="justify" height="1" colspan="5"><hr COLOR="#C0C0C0" NOSHADE align="left" size="1">
    </td>
  </tr>
  <tr>
    <td width="100%" valign="top" align="justify" height="400" colspan="5"><p class="aisheader2">Introduction</p>
    <p class="aisparagraph">
    This chapter will teach you about facts and beliefs in Brahms.</p>
    <p class="aisheader2">
    Task</p>
    <p class="aisparagraph">
    The balance of a bank account; the price of a lunch at the restaurant; the time of day,
    etc. There exist many 'facts' in a Brahms model-and at least as many 'beliefs' for each
    agent! In fact, everything that happens in a Brahms model is related to either a fact, or
    a belief, or both. Hence, now start giving your agent(s) initial facts and beliefs about
    their environment that they will need in order to act in their world.</p>
    <p class="aisheader2">
    Description</p>
    <p class="aisparagraph">
    The state of the world in Brahms is stored as propositions called &quot;facts&quot;. A
    fact is meant to represent some physical state of the world or an attribute of some object
    or agent. Facts are global: with the appropriate detectable any agent can detect a fact
    (we will discuss this later in section 4.7). Agents and objects can have
    &quot;beliefs.&quot; Beliefs are propositions (like facts) that represent the internal
    &quot;mental&quot; state of an agent or object. Beliefs are always local to the agent or
    object.</p>
    <p class="aisparagraph"><i>Beliefs</i></p>
    <p class="aisparagraph">
    A belief represents a particular object knowing about something, typically an agent. A
    belief always has the form:</p>
      <blockquote>
    <p class="aisparagraph"><font face="Courier">
    (&lt;object or agent&gt;.&lt;attributename&gt; &lt;operator&gt; &lt;value&gt;)</font> </p>
      </blockquote>
    <p class="aisparagraph">
    OR</p>
      <blockquote>
    <p class="aisparagraph"><font face="Courier">
    (&lt;object or agent&gt; &lt;relation-name&gt; &lt;object or agent&gt; &lt;is true | is
    false&gt;)</font></p>
      </blockquote>
    <p class="aisparagraph">
    Beliefs are always local to an agent or object; that is, only the agent or object itself
    can examine, or search (i.e. reason with) its own beliefs, and no other agent or object
    can do so. A belief held by an agent may differ from the corresponding fact or a belief
    that another agent has about the same fact. Beliefs can be declared as initial-beliefs at
    the object class, object, group, or agent level, or an agent or object can create beliefs
    during the running of a Brahms simulation. A belief can be thought of as an
    object-attribute-value triplet. There are four ways an agent or object's beliefs can
    change:</p>
      <ol>
        <li>
          <p class="aisparagraph">An agent or object can create or change a belief before or after performing an activity
    or during some reasoning.</li>
        <li>
          <p class="aisparagraph">An agent or object can detect a fact in the world, which, ones detected, becomes a
    belief.</li>
        <li>
          <p class="aisparagraph">Another agent or object communicates its belief(s) to another agent or object.</li>
        <li>
          <p class="aisparagraph">The modeler adds initial-beliefs at the class, object, group, or agent level.</li>
      </ol>
    <p class="aisparagraph">
    The representation of beliefs together with reasoning implements a conventional
    first?order predicate logic of beliefs. The modeler has available the full range of
    representation of, and reasoning on, beliefs conventionally found in rule-based systems
    such as EMYCIN and other agent languages. However, because the logic is first-order,
    agents are not modeled as having second-order beliefs (beliefs about other agents'
    beliefs).</p>
    <p class="aisparagraph">
    Agents and objects in Brahms have beliefs represented as first-order propositions. For
    instance, suppose agent A1 beliefs that he is writing his dissertation, and that it will
    be finished on time. A1 would then have the belief set:</p>
      <blockquote>
    <p class="aisparagraph">
    { BEL(Is-Writing (A1, Dissertation)), BEL(Will-Finish-On-Time(A1, Dissertation)) }</p>
      </blockquote>
    <p class="aisparagraph">
    An agent will always start out with an initial-belief set that is defined at the agent's
    local-level, and the groups of which the agent is a member. Initial-beliefs are assigned
    in the initialization phase of a simulation. These initial-beliefs define the initial
    state for the agent. An agent without an initial state could be seen as initially 'dumb',
    or an agent that has not experienced anything yet. As the simulation time moves forward
    agents will infer, detect and receive new beliefs, either based on their actions and
    communications in the world or deducing new beliefs, using an inference rule.</p>
    <p class="aisparagraph"><i>
    Facts</i></p>
    <p class="aisparagraph">
    Facts, in Brahms, are factual states of the world. They represent, what we call, a
    'birds-eye view' of the world. Facts are global to the world, meaning that they can be
    'seen' by every agent and object in the world.</p>
      <p class="aisparagraph">
    Therefore, in Brahms there is a difference between facts that actually hold in the world,
    and believes of an agent or object. This means that we can represent the facts in the
    world separate from the belief-state of agents about that world. For instance, although
    the fact is that the color of my car is red, I can believe that the color of my car is
    green, because I might be colorblind. In representing the context of the agent as facts in
    the world, we are able to have multiple agents react on the same facts in different ways,
    dependent on their beliefs about these facts. In Brahms, it is not necessary that any
    agent has any belief about a fact. Specifically, facts are independent from the knowledge
    of agents.</p>
      <p class="aisheader2">Tutorial</p>
    <p class="aisparagraph">
    Let's go back to the code we were working on in the Agents and Groups section:</p>
      <blockquote>
    <p class="aisparagraph">
    <font face="Courier">package projects.Atm;<br>
    agent Alex_Agent memberof Student {<br>
    &nbsp; location: SouthHall;<br>
    <br>
    &nbsp; initial_beliefs:<br>
    &nbsp;&nbsp;&nbsp; (current.howHungry = 15.00);<br>
    &nbsp;&nbsp;&nbsp; (current.male = true);<br>
    &nbsp;&nbsp;&nbsp; (current.preferredCashOut = 8.0);<br>
    <br>
    &nbsp; initial_facts:<br>
    &nbsp;&nbsp;&nbsp; (current.male = true);<br>
    &nbsp;&nbsp;&nbsp; (current.howHungry = 15.0);<br>
    &nbsp;&nbsp;&nbsp; (current.preferredCashOut = 8.0);<br>
    }
    </font></p>
      </blockquote>
    <p class="aisparagraph">
    A belief is a first-order proposition that an agent or object believes to be true. </p>
    <p class="aisparagraph">
    At the beginning of the simulation, you can give your agents initial beliefs about himself
    and other agents, objects, concepts in the world. During the simulation, the agent can get
    new beliefs - through his own workframes and thoughtframes as well as by communication.
    Similarly, facts are state of the world that you can assign at the beginning of the
    simulation as 'initial facts' and then modify during the simulation in a variety of ways.
    Importantly, facts are 'general' - they exist in the world and they can be detected as
    well as modified by other agents or objects; but beliefs are always local to an agent or
    object, i.e. only the agent/object can access its beliefs, no other agent/object can. This
    allows us to represent how a specific agent 'views' the state of the world. For objects,
    beliefs can represent information stored in/on the object. Agents act based on their
    beliefs, whereas objects do not. Beliefs are the 'triggers' of agent's actions (cf.
    section 4.7). Hence, when we will study about 'conclusions' in workframes and
    thoughtframes (see sections 4.7 and 4.9) we will see that an agent can 'conclude' beliefs
    only for himself, even though he might 'conclude' facts about another agent's attribute.</p>
    <p class="aisparagraph">
    Initial-beliefs define the initial state for an agent and define the initial information
    for objects. Initial-beliefs are turned into actual beliefs for the agent when the model
    is initialized for a simulation run. In this case, we are giving agent Alex_Agent some
    initial beliefs about himself. The use of 'current' in the above code has the very same
    scope of the term 'this' in C++ or Java. It always refers to the agent or object executing
    that particular construct, or, in other words, it always refers to the element inside
    whose body declaration the 'current' term is being used. Note, furthermore, that
    attributes can be referred to very much like in Java in the construct: object.attribute.
    Older version of the Brahms language also admitted the construct: 'the attribute of
    object' but it is preferable to use the newer and more Java-like syntax. </p>
    <p class="aisparagraph">
    Similarly, facts represent the state of the world. A fact is a first-order proposition
    about the world. Facts are in contrast to beliefs, global. Any agent can detect a fact in
    the world and turn it into a belief and act on the belief. Objects on the other hand, only
    react to facts. Initial-facts define the initial state of the world. Initial-facts are
    turned into actual facts in the world when the model is initialized for a simulation run.
    In the example above we are stating for example that the attribute male of the agent is a
    fact in the world that other agents can detect, and potentially act upon.</p>
    <p class="aisparagraph">
    Not always things are so straightforward. Is the hungriness level of Alex_Agent only a
    belief or an actual fact? One might argument for both options. The hungriness level of a
    person is based on some specific fact, i.e. it is something which exists in the world -
    the status of the agent's endocrine system, which can be detected with appropriate
    measurements and tests and which might have an effect on its own even if the agent does
    not detect it or as different beliefs about it (think for example of an agent so deeply
    involved in an activity that he forgets about eating, while his body is instead
    increasingly in need for food). On the other side, what would be the use of making the
    hungriness level a fact in the world of this scenario? Note in fact that facts in the
    world can be detected by other agents or objects: so, do we want such an internal fact as
    the hungriness state of an agent to be (potentially) public knowledge? Of course, the
    other agents and other objects in the model do know automatically know about all the facts
    in the world: they only see or act upon depending on how the modeler decides to model his
    scenario (for example, another agent would need a 'detectable' - more on this in section
    4.13 - to get information about a fact 'hungriness level'). On the other side, you do not
    need any fact to model the belief of an agent, but you do need facts to make objects react
    (objects do not react on beliefs). This dichotomy involves some physolophical discussion,
    that we leave aside for now, but it suffices to say that it leaves open several approaches
    to the modeling of attributes such as the physical state of a human agent (here, his
    'hungriness level', which could have been modeled just as a belief only) as well as of
    complex artifacts such as Banks and Atms in our model (should they be objects or agents)?
    In the code attached to this Tutorial, we have chosen to model banks and Atm's as objects,
    but you should always remember that more than one approach is possible in Brahms, and a
    few might be equally correct (we will discuss these issues in particular when we will
    discuss detectables). </p>
    <p class="aisparagraph">
    On the other side, an agent needs to have a belief (even if an 'uncertain' one: see next
    section for an explanation of what that means in Brahms), in order to use it. For example,
    workframes are triggered when preconditions are met (cf. 4.7). For a precondition to be
    met, the agent must have at least a belief about the existence of the particular concept
    considered in the precondition. An agent does not automatically know even about its own
    attributes. For example, in the Atm scenario, the hungriness level is an attribute of
    Students. Even after modeling its value for Alex_Agent as a fact, we still must set up a
    belief for the agent in order for Alex to know and act after it. </p>
    <p class="aisparagraph">
    So, when should we use beliefs and when do we use facts? Be careful: facts in the world
    can be known by everybody in the world with a detectable to detect that fact: another
    agent can know your account balance if you model it as a fact (and, of course, if you
    model that other agent's detectable of your bank account). A rule of thumb is the
    following: when you are modeling flows of data, you might preferably use beliefs; if you
    are dealing with things happening and changing in the physical world, then you might
    instead use facts. It is up to you as a modeler to find the right combination between
    realism and practicality, specificity and generality. There will be several cases in the
    Atm scenario (as well as in all the other scenarios you will model in Brahms), where more
    than one option is available to you. Take cash and Atm machines: in the coming pages we
    will be modeling cash as an object that belongs to the student, with an attribute
    &quot;balance&quot; that represents the total amount of cash the student is carrying.
    Other ways of modeling this are also possible. Similarly, the Atm will be modeled as an
    object (which implies that it will react only to facts), but it could also have been
    modeled as an agent. The choice is the modeler's. The rule of thumb is to try to represent
    things as close to your world experience as possible. Thus, one reasonable good rule is:
    Humans are modeled as agents and everything else is modeled as objects, most importantly
    all objects in the world.</td>
  </tr>
</table>
</div><div align="left">

<table border="0" width="100%" cellpadding="0" cellspacing="0">
  <tr>
    <td width="100%"><hr COLOR="#C0C0C0" NOSHADE align="left" size="1">
    </td>
  </tr>
  <tr>
    <td width="100%" align="center"><font size="1" face="Arial">Questions or problems
    regarding this web site should be directed to the <a href="mailto:webmaster@agentisolutions.com">Webmaster</a>.<br>
    Copyright � 2001 NASA Ames Research Center. All rights reserved.<br>
    Last modified: 
	<!--webbot bot="TimeStamp" S-Type="EDITED" S-Format="%A %B %d, %Y" startspan -->Monday April 30, 2007<!--webbot bot="TimeStamp" i-checksum="31391" endspan -->.</font></td>
  </tr>
</table>
</div>
</body>
</html>
